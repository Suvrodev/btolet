.image-zoom-container {
  position: relative;
  display: inline-block;
}

.image-zoom {
  overflow: hidden;
}

.image-zoom img {
  transition: transform 0.3s ease;
}

.zoom-in {
  transform: scale(1.2);
}

.zoomed-image {
  position: absolute;
  width: 200px; /* Adjust the size of the zoomed image container */
  height: 200px;
  overflow: hidden;
  border: 1px solid #ccc;
  z-index: 1000;
  pointer-events: none;
}

.zoomed-image img {
  width: 100%;
  height: 100%;
  transform-origin: 0 0;
}



.imageWrapper {
  position: relative;
  width: 500px;
  height: 500px;
  overflow: hidden;
}

.viewport {
  width: 100%;
  height: 100%;
  background-color: green;
  background-size: 100%; /* Initial size */
  transition: background-size 0.5s ease;
}

.innerImage {
  display: block;
  width: 100%;
  height: auto;
}

.viewport.zoomed {
  background-size: 200%; /* Zoomed size */
}


/* 

Last CSS
*/

.imageWrapper {
  position: relative;
  width: 500px;
  height: 500px;
  overflow: hidden;
}

.viewport {
  width: 100%;
  height: 100%;
  background-color: green;
  background-size: 100%; 
  transition: background-size 0.5s ease;
}

.viewport.zoomed {
  background-size: 200% 200%; 
}


/********************************************************/
.toggle {
  flex-shrink: 0;
  --tglbg: var(--fallback-b1,oklch(var(--b1)/1));
  --handleoffset: 1.5rem/* 24px */;
  --handleoffsetcalculator: calc(var(--handleoffset) * -1);
  --togglehandleborder: 0 0;
  height: 40px/* 24px */;
  width: 80px/* 48px */;
  cursor: pointer;
  appearance: none;
  border-radius: var(--rounded-badge, 1.9rem/* 30.4px */);
  border-width: 1px;
  border-color: currentColor;
  background-color: currentColor;
  color: var(--fallback-bc,oklch(var(--bc)/0.5));
  transition: background,
  box-shadow var(--animation-input, 0.2s) ease-out;
  box-shadow: var(--handleoffsetcalculator) 0 0 2px var(--tglbg) inset,
  0 0 0 2px var(--tglbg) inset,
  var(--togglehandleborder);
}
[dir="rtl"] .toggle {
  --handleoffsetcalculator: calc(var(--handleoffset) * 1);
}
.toggle:focus-visible {
  outline-style: solid;
  outline-width: 2px;
  outline-offset: 2px;
  outline-color: var(--fallback-bc,oklch(var(--bc)/0.2));
}
.toggle:hover {
  background-color: currentColor;
}
.toggle:checked,
.toggle[checked="true"],
.toggle[aria-checked="true"] {
  background-image: none;
  --handleoffsetcalculator: var(--handleoffset);
  --tw-text-opacity: 1;
  color: var(--fallback-bc,oklch(var(--bc)/var(--tw-text-opacity)));
}
.toggle:checked,
.toggle[checked="true"],
.toggle[aria-checked="true"] {
  background-image: none;
  --handleoffsetcalculator: var(--handleoffset);
  --tw-text-opacity: 1;
  color: var(--fallback-bc,oklch(var(--bc)/var(--tw-text-opacity)));
}
.toggle:checked,
.toggle[checked="true"],
.toggle[aria-checked="true"] {
  background-image: none;
  --handleoffsetcalculator: var(--handleoffset);
  --tw-text-opacity: 1;
  color: var(--fallback-bc,oklch(var(--bc)/var(--tw-text-opacity)));
}
[dir="rtl"] .toggle:checked, [dir="rtl"] .toggle[checked="true"], [dir="rtl"] .toggle[aria-checked="true"] {
  --handleoffsetcalculator: calc(var(--handleoffset) * -1);
}
[dir="rtl"] .toggle:checked, [dir="rtl"] .toggle[checked="true"], [dir="rtl"] .toggle[aria-checked="true"] {
  --handleoffsetcalculator: calc(var(--handleoffset) * -1);
}
[dir="rtl"] .toggle:checked, [dir="rtl"] .toggle[checked="true"], [dir="rtl"] .toggle[aria-checked="true"] {
  --handleoffsetcalculator: calc(var(--handleoffset) * -1);
}
.toggle:indeterminate {
  --tw-text-opacity: 1;
  color: var(--fallback-bc,oklch(var(--bc)/var(--tw-text-opacity)));
  box-shadow: calc(var(--handleoffset) / 2) 0 0 2px var(--tglbg) inset,
    calc(var(--handleoffset) / -2) 0 0 2px var(--tglbg) inset,
    0 0 0 2px var(--tglbg) inset;
}
[dir="rtl"] .toggle:indeterminate {
  box-shadow: calc(var(--handleoffset) / 2) 0 0 2px var(--tglbg) inset,
      calc(var(--handleoffset) / -2) 0 0 2px var(--tglbg) inset,
      0 0 0 2px var(--tglbg) inset;
}
.toggle:disabled {
  cursor: not-allowed;
  --tw-border-opacity: 1;
  border-color: var(--fallback-bc,oklch(var(--bc)/var(--tw-border-opacity)));
  background-color: transparent;
  opacity: 0.3;
  --togglehandleborder: 0 0 0 3px var(--fallback-bc,oklch(var(--bc)/1)) inset,
    var(--handleoffsetcalculator) 0 0 3px var(--fallback-bc,oklch(var(--bc)/1)) inset;
}